import re
import streamlit as st

# ─────────────────────────────────────────────────────────────
# ✅ 기본 금융 용어 사전 (RAG/사전 없이도 동작하는 최소 세트)
# - 각 용어는 '정의', '설명', '비유'로 구성
# - 실제 서비스에서는 DB/CSV/RAG로 대체 가능
# ─────────────────────────────────────────────────────────────
DEFAULT_TERMS = {
    "양적완화": {
        "정의": "중앙은행이 시중에 통화를 공급하기 위해 국채 등을 매입하는 정책",
        "설명": "경기 부양을 위해 중앙은행이 돈을 풀어 시장 유동성을 높이는 방법입니다.",
        "비유": "마른 땅에 물을 뿌려주는 것처럼, 경제에 돈이라는 물을 공급하는 것입니다.",
    },
    "기준금리": {
        "정의": "중앙은행이 시중은행에 돈을 빌려줄 때 적용하는 기준이 되는 금리",
        "설명": "모든 금리의 기준이 되며, 기준금리가 오르면 대출이자도 함께 오릅니다.",
        "비유": "물가의 온도조절기와 같습니다. 경제가 과열되면 올리고, 침체되면 내립니다.",
    },
    "배당": {
        "정의": "기업이 벌어들인 이익 중 일부를 주주들에게 나눠주는 것",
        "설명": "주식을 보유한 주주에게 기업의 이익을 분배하는 방식입니다.",
        "비유": "함께 식당을 운영하는 동업자들이 매출 중 일부를 나눠갖는 것과 같습니다.",
    },
    "PER": {
        "정의": "주가수익비율. 주가를 주당순이익으로 나눈 값",
        "설명": "주식이 1년 치 이익의 몇 배에 거래되는지를 나타냅니다. 낮을수록 저평가된 것으로 볼 수 있습니다.",
        "비유": "1년에 100만원 버는 가게를 몇 년 치 수익을 주고 사는지를 나타냅니다.",
    },
    "환율": {
        "정의": "서로 다른 두 나라 화폐의 교환 비율",
        "설명": "원화를 달러로, 달러를 원화로 바꿀 때 적용되는 비율입니다.",
        "비유": "해외 쇼핑몰에서 물건을 살 때 적용되는 환전 비율입니다.",
    },
}

# ─────────────────────────────────────────────────────────────
# 🧰 세션에 금융 용어 사전 보장
# - Streamlit은 사용자별 세션 상태(st.session_state)를 제공
# - 최초 1회만 DEFAULT_TERMS를 복사해 넣어 중간 변경에도 원본 보존
# ─────────────────────────────────────────────────────────────
def ensure_financial_terms():
    if "financial_terms" not in st.session_state:
        st.session_state.financial_terms = DEFAULT_TERMS.copy()

# ─────────────────────────────────────────────────────────────
# ✨ 본문에서 금융 용어 하이라이트
# - 기사 본문 텍스트에서 용어를 찾아 <mark> 태그로 감싸 강조
# - 대소문자 무시(re.IGNORECASE) → 영문 약어 등에도 대응
# - data-term 속성: 추후 JS/이벤트 연결 시 어떤 용어인지 식별 용이
# - Streamlit 출력 시 st.markdown(..., unsafe_allow_html=True) 필요
#   (이 함수는 HTML 문자열만 반환)
# ─────────────────────────────────────────────────────────────
def highlight_terms(text: str) -> str:
    highlighted = text

    # 현재 세션의 용어 사전에서 키(용어)만 순회
    for term in st.session_state.financial_terms.keys():
        # re.escape(term): 특수문자 포함 용어도 안전하게 매칭
        # re.IGNORECASE: 대소문자 구분 없이 검색 (영문 용어 대비)
        pattern = re.compile(re.escape(term), re.IGNORECASE)

        # ⚠️ 주의: 아래 대체 문자열의 {term}은 '사전 키' 표기를 그대로 사용
        # - 매칭된 원래 표기(대소문자)를 유지하고 싶다면 repl 함수 사용 필요
        #   예) pattern.sub(lambda m: f"...>{m.group(0)}</mark>", highlighted)
        highlighted = pattern.sub(
            f'<mark class="clickable-term" data-term="{term}" '
            f'style="background-color: #FFEB3B; cursor: pointer; padding: 2px 4px; border-radius: 3px;">{term}</mark>',
            highlighted,
        )
    return highlighted

# ─────────────────────────────────────────────────────────────
# 🦉 챗봇 응답용: 용어 설명 생성
# - 사전에 없으면 안내 문구 반환
# - 있으면 '정의/설명/비유'를 포맷팅하여 마크다운으로 반환
# - chat_history는 맥락 강화용 파라미터(현재는 미사용)
# ─────────────────────────────────────────────────────────────
def explain_term(term: str, chat_history):
    terms = st.session_state.financial_terms

    # 존재하지 않는 용어 처리
    if term not in terms:
        return f"'{term}'에 대한 정보가 금융 사전에 없습니다. 다른 용어를 선택해주세요."

    info = terms[term]

    # 마크다운 포맷으로 친절한 설명 구성
    return (
        f"**{term}** 에 대해 설명해드릴게요! 🎯\n\n"
        f"📖 **정의**\n{info['정의']}\n\n"
        f"💡 **쉬운 설명**\n{info['설명']}\n\n"
        f"🌟 **비유로 이해하기**\n{info['비유']}\n\n"
        f"더 궁금한 점이 있으시면 언제든지 물어보세요!"
    )